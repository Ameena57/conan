diff --git a/conans/test/functional/toolchains/cmake/cmakedeps/test_cmakedeps_versions.py b/conans/test/functional/toolchains/cmake/cmakedeps/test_cmakedeps_versions.py
index 6c9be4c36..74a0f018f 100644
--- a/conans/test/functional/toolchains/cmake/cmakedeps/test_cmakedeps_versions.py
+++ b/conans/test/functional/toolchains/cmake/cmakedeps/test_cmakedeps_versions.py
@@ -9,11 +9,12 @@ from conans.test.utils.tools import TestClient
 @pytest.fixture(scope="module")
 def hello_client():
     client = TestClient()
-    client.run("new hello/1.1 -s")
-    client.run("create .")
+    client.run("new hello/1.1 --template=cmake_lib")
+    client.run("create . -tf=None")
     return client
 
 
+@pytest.mark.tool_cmake(version="3.15")
 @pytest.mark.parametrize("name, version, params, cmake_fails, package_found", [
     ("hello", "1.0", "", False, True),
     ("Hello", "1.0", "", False, True),
@@ -44,12 +45,13 @@ def test_version(hello_client, name, version, params, cmake_fails, package_found
         """).format(name=name, version=version, params=params)
 
     conanfile = textwrap.dedent("""
-        from conans import ConanFile, CMake
+        from conans import ConanFile
+        from conan.tools.cmake import CMake
 
         class Conan(ConanFile):
-            settings = "build_type"
             requires = "hello/1.1"
-            generators = "CMakeDeps"
+            settings = "os", "compiler", "arch", "build_type"
+            generators = "CMakeDeps", "CMakeToolchain"
 
             def build(self):
                 cmake = CMake(self)
@@ -78,12 +80,13 @@ def test_no_version_file(hello_client):
         """)
 
     conanfile = textwrap.dedent("""
-        from conans import ConanFile, CMake
+        from conans import ConanFile
+        from conan.tools.cmake import CMake
 
         class Conan(ConanFile):
-            settings = "build_type"
+            settings = "os", "compiler", "arch", "build_type"
             requires = "hello/1.1"
-            generators = "CMakeDeps"
+            generators = "CMakeDeps", "CMakeToolchain"
 
             def build(self):
                 cmake = CMake(self)
