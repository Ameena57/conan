[1mdiff --git a/conan/api/subapi/graph.py b/conan/api/subapi/graph.py[m
[1mindex 02ae2b3d5..388cbe21a 100644[m
[1m--- a/conan/api/subapi/graph.py[m
[1m+++ b/conan/api/subapi/graph.py[m
[36m@@ -1,7 +1,10 @@[m
 import os[m
 [m
[32m+[m[32mfrom conan.api.output import ConanOutput[m
 from conan.api.subapi import api_method[m
 from conan.api.conan_app import ConanApp[m
[32m+[m[32mfrom conan.cli.common import scope_options[m
[32m+[m[32mfrom conan.cli.printers.graph import print_graph_basic, print_graph_packages[m
 from conans.client.graph.graph import Node, RECIPE_CONSUMER, CONTEXT_HOST, RECIPE_VIRTUAL[m
 from conans.client.graph.graph_binaries import GraphBinariesAnalyzer[m
 from conans.client.graph.graph_builder import DepsGraphBuilder[m
[36m@@ -18,7 +21,6 @@[m [mclass GraphAPI:[m
     def __init__(self, conan_api):[m
         self.conan_api = conan_api[m
 [m
[31m-    @api_method[m
     def load_root_consumer_conanfile(self, path, profile_host, profile_build,[m
                                      name=None, version=None, user=None, channel=None,[m
                                      update=None, remotes=None, lockfile=None):[m
[36m@@ -96,6 +98,75 @@[m [mclass GraphAPI:[m
         root_node = Node(ref=None, conanfile=conanfile, context=CONTEXT_HOST, recipe=RECIPE_VIRTUAL)[m
         return root_node[m
 [m
[32m+[m[32m    @api_method[m
[32m+[m[32m    def load_graph_requires(self, requires, tool_requires, profile_host, profile_build,[m
[32m+[m[32m                            lockfile, remotes, build, update, check_updates=False,[m
[32m+[m[32m                            allow_error=False):[m
[32m+[m[32m        requires = [RecipeReference.loads(r) for r in requires] if requires else None[m
[32m+[m[32m        tool_requires = [RecipeReference.loads(r) for r in tool_requires] if tool_requires else None[m
[32m+[m
[32m+[m[32m        out = ConanOutput()[m
[32m+[m[32m        out.title("Input profiles")[m
[32m+[m[32m        out.info("Profile host:")[m
[32m+[m[32m        out.info(profile_host.dumps())[m
[32m+[m[32m        out.info("Profile build:")[m
[32m+[m[32m        out.info(profile_build.dumps())[m
[32m+[m
[32m+[m[32m        scope_options(profile_host, requires=requires, tool_requires=tool_requires)[m
[32m+[m[32m        root_node = self.load_root_virtual_conanfile(requires=requires, tool_requires=tool_requires,[m
[32m+[m[32m                                                     profile_host=profile_host)[m
[32m+[m
[32m+[m[32m        out.title("Computing dependency graph")[m
[32m+[m[32m        # check_updates = args.check_updates if "check_updates" in args else False[m
[32m+[m[32m        deps_graph = self.load_graph(root_node, profile_host=profile_host,[m
[32m+[m[32m                                     profile_build=profile_build,[m
[32m+[m[32m                                     lockfile=lockfile,[m
[32m+[m[32m                                     remotes=remotes,[m
[32m+[m[32m                                     update=update,[m
[32m+[m[32m                                     check_update=check_updates)[m
[32m+[m[32m        print_graph_basic(deps_graph)[m
[32m+[m[32m        out.title("Computing necessary packages")[m
[32m+[m[32m        if deps_graph.error:[m
[32m+[m[32m            if allow_error:[m
[32m+[m[32m                return deps_graph, lockfile[m
[32m+[m[32m            raise deps_graph.error[m
[32m+[m
[32m+[m[32m        self.analyze_binaries(deps_graph, build, remotes=remotes, update=update, lockfile=lockfile)[m
[32m+[m[32m        print_graph_packages(deps_graph)[m
[32m+[m[32m        return deps_graph[m
[32m+[m
[32m+[m[32m    @api_method[m
[32m+[m[32m    def load_graph_consumer(self, path, name, version, user, channel,[m
[32m+[m[32m                            profile_host, profile_build, lockfile, remotes, build, update,[m
[32m+[m[32m                            allow_error=False):[m
[32m+[m[32m        out = ConanOutput()[m
[32m+[m[32m        out.title("Input profiles")[m
[32m+[m[32m        out.info("Profile host:")[m
[32m+[m[32m        out.info(profile_host.dumps())[m
[32m+[m[32m        out.info("Profile build:")[m
[32m+[m[32m        out.info(profile_build.dumps())[m
[32m+[m
[32m+[m[32m        root_node = self.load_root_consumer_conanfile(path, profile_host, profile_build,[m
[32m+[m[32m                                                      name=name, version=version, user=user,[m
[32m+[m[32m                                                      channel=channel, lockfile=lockfile,[m
[32m+[m[32m                                                      remotes=remotes, update=update)[m
[32m+[m
[32m+[m[32m        out.title("Computing dependency graph")[m
[32m+[m[32m        check_updates = False[m
[32m+[m[32m        deps_graph = self.load_graph(root_node, profile_host=profile_host,[m
[32m+[m[32m                                     profile_build=profile_build, lockfile=lockfile,[m
[32m+[m[32m                                     remotes=remotes, update=update, check_update=check_updates)[m
[32m+[m[32m        print_graph_basic(deps_graph)[m
[32m+[m[32m        out.title("Computing necessary packages")[m
[32m+[m[32m        if deps_graph.error:[m
[32m+[m[32m            if allow_error:[m
[32m+[m[32m                return deps_graph[m
[32m+[m[32m            raise deps_graph.error[m
[32m+[m
[32m+[m[32m        self.analyze_binaries(deps_graph, build, remotes=remotes, update=update, lockfile=lockfile)[m
[32m+[m[32m        print_graph_packages(deps_graph)[m
[32m+[m[32m        return deps_graph[m
[32m+[m
     @api_method[m
     def load_graph(self, root_node, profile_host, profile_build, lockfile=None, remotes=None,[m
                    update=False, check_update=False):[m
[1mdiff --git a/conan/cli/commands/build.py b/conan/cli/commands/build.py[m
[1mindex a1ca878a6..8f53fbaa7 100644[m
[1m--- a/conan/cli/commands/build.py[m
[1m+++ b/conan/cli/commands/build.py[m
[36m@@ -3,7 +3,6 @@[m [mimport os[m
 from conan.api.output import ConanOutput[m
 from conan.cli.command import conan_command[m
 from conan.cli.commands import make_abs_path[m
[31m-from conan.cli.commands.install import graph_compute[m
 from conan.cli.args import add_lockfile_args, _add_common_install_arguments, add_reference_args, \[m
     _help_build_policies[m
 from conan.api.conan_app import ConanApp[m
[36m@@ -31,7 +30,16 @@[m [mdef build(conan_api, parser, *args):[m
     folder = os.path.dirname(path)[m
     remotes = conan_api.remotes.list(args.remote)[m
 [m
[31m-    deps_graph, lockfile = graph_compute(args, conan_api, partial=args.lockfile_partial)[m
[32m+[m[32m    lockfile = conan_api.lockfile.get_lockfile(lockfile=args.lockfile,[m
[32m+[m[32m                                               conanfile_path=path,[m
[32m+[m[32m                                               cwd=cwd,[m
[32m+[m[32m                                               partial=args.lockfile_partial)[m
[32m+[m[32m    profile_host, profile_build = conan_api.profiles.get_profiles_from_args(args)[m
[32m+[m
[32m+[m[32m    deps_graph = conan_api.graph.load_graph_consumer(path, args.name, args.version,[m
[32m+[m[32m                                                     args.user, args.channel,[m
[32m+[m[32m                                                     profile_host, profile_build, lockfile, remotes,[m
[32m+[m[32m                                                     args.build, args.update)[m
 [m
     out = ConanOutput()[m
     out.title("Installing packages")[m
[1mdiff --git a/conan/cli/commands/graph.py b/conan/cli/commands/graph.py[m
[1mindex 1f193d2b6..1f847badb 100644[m
[1m--- a/conan/cli/commands/graph.py[m
[1m+++ b/conan/cli/commands/graph.py[m
[36m@@ -5,7 +5,6 @@[m [mfrom conan.api.output import ConanOutput, cli_out_write[m
 from conan.internal.deploy import do_deploys[m
 from conan.cli.command import conan_command, conan_subcommand, CommandResult[m
 from conan.cli.commands import make_abs_path[m
[31m-from conan.cli.commands.install import graph_compute[m
 from conan.cli.args import common_graph_args[m
 from conan.cli.formatters.graph import format_graph_html, format_graph_json, format_graph_dot[m
 from conan.cli.formatters.graph.graph_info_text import format_graph_info[m
[36m@@ -46,7 +45,26 @@[m [mdef graph_build_order(conan_api, parser, subparser, *args):[m
         raise ConanException("Can't use --name, --version, --user or --channel arguments with "[m
                              "--requires")[m
 [m
[31m-    deps_graph, lockfile = graph_compute(args, conan_api, partial=args.lockfile_partial)[m
[32m+[m[32m    cwd = os.getcwd()[m
[32m+[m[32m    path = conan_api.local.get_conanfile_path(args.path, cwd, py=None) if args.path else None[m
[32m+[m
[32m+[m[32m    # Basic collaborators, remotes, lockfile, profiles[m
[32m+[m[32m    remotes = conan_api.remotes.list(args.remote)[m
[32m+[m[32m    lockfile = conan_api.lockfile.get_lockfile(lockfile=args.lockfile,[m
[32m+[m[32m                                               conanfile_path=path,[m
[32m+[m[32m                                               cwd=cwd,[m
[32m+[m[32m                                               partial=args.lockfile_partial)[m
[32m+[m[32m    profile_host, profile_build = conan_api.profiles.get_profiles_from_args(args)[m
[32m+[m
[32m+[m[32m    if path:[m
[32m+[m[32m        deps_graph = conan_api.graph.load_graph_consumer(path, args.name, args.version,[m
[32m+[m[32m                                                         args.user, args.channel,[m
[32m+[m[32m                                                         profile_host, profile_build, lockfile,[m
[32m+[m[32m                                                         remotes, args.build, args.update)[m
[32m+[m[32m    else:[m
[32m+[m[32m        deps_graph = conan_api.graph.load_graph_requires(args.requires, args.tool_requires,[m
[32m+[m[32m                                                         profile_host, profile_build, lockfile,[m
[32m+[m[32m                                                         remotes, args.build, args.update)[m
 [m
     out = ConanOutput()[m
     out.title("Computing the build order")[m
[36m@@ -105,8 +123,29 @@[m [mdef graph_info(conan_api, parser, subparser, *args):[m
     if args.format is not None and (args.filter or args.package_filter):[m
         raise ConanException("Formatted outputs cannot be filtered")[m
 [m
[31m-    deps_graph, lockfile = graph_compute(args, conan_api, partial=args.lockfile_partial,[m
[31m-                                         allow_error=True)[m
[32m+[m[32m    cwd = os.getcwd()[m
[32m+[m[32m    path = conan_api.local.get_conanfile_path(args.path, cwd, py=None) if args.path else None[m
[32m+[m
[32m+[m[32m    # Basic collaborators, remotes, lockfile, profiles[m
[32m+[m[32m    remotes = conan_api.remotes.list(args.remote)[m
[32m+[m[32m    lockfile = conan_api.lockfile.get_lockfile(lockfile=args.lockfile,[m
[32m+[m[32m                                               conanfile_path=path,[m
[32m+[m[32m                                               cwd=cwd,[m
[32m+[m[32m                                               partial=args.lockfile_partial)[m
[32m+[m[32m    profile_host, profile_build = conan_api.profiles.get_profiles_from_args(args)[m
[32m+[m
[32m+[m[32m    check_updates = args.check_updates if "check_updates" in args else False[m
[32m+[m[32m    if path:[m
[32m+[m[32m        deps_graph = conan_api.graph.load_graph_consumer(path, args.name, args.version,[m
[32m+[m[32m                                                         args.user, args.channel,[m
[32m+[m[32m                                                         profile_host, profile_build, lockfile,[m
[32m+[m[32m                                                         remotes, args.build, args.update,[m
[32m+[m[32m                                                         allow_error=True)[m
[32m+[m[32m    else:[m
[32m+[m[32m        deps_graph = conan_api.graph.load_graph_requires(args.requires, args.tool_requires,[m
[32m+[m[32m                                                         profile_host, profile_build, lockfile,[m
[32m+[m[32m                                                         remotes, args.build, args.update,[m
[32m+[m[32m                                                         allow_error=True)[m
 [m
     lockfile = conan_api.lockfile.update_lockfile(lockfile, deps_graph, args.lockfile_packages,[m
                                                   clean=args.lockfile_clean)[m
[1mdiff --git a/conan/cli/commands/install.py b/conan/cli/commands/install.py[m
[1mindex b6b8a963d..16e567d82 100644[m
[1m--- a/conan/cli/commands/install.py[m
[1m+++ b/conan/cli/commands/install.py[m
[36m@@ -2,14 +2,10 @@[m [mimport json[m
 import os[m
 [m
 from conan.api.output import ConanOutput, cli_out_write[m
[32m+[m[32mfrom conan.cli.args import common_graph_args[m
 from conan.cli.command import conan_command[m
 from conan.cli.commands import make_abs_path[m
[31m-from conan.cli.common import scope_options[m
[31m-from conan.cli.args import common_graph_args[m
[31m-from conan.cli.printers.graph import print_graph_basic, print_graph_packages[m
[31m-[m
 from conans.errors import ConanException[m
[31m-from conans.model.recipe_ref import RecipeReference[m
 [m
 [m
 def json_install(info):[m
[36m@@ -17,70 +13,6 @@[m [mdef json_install(info):[m
     cli_out_write(json.dumps({"graph": deps_graph.serialize()}, indent=4))[m
 [m
 [m
[31m-def graph_compute(args, conan_api, partial=False, allow_error=False):[m
[31m-    cwd = os.getcwd()[m
[31m-    path = conan_api.local.get_conanfile_path(args.path, cwd, py=None) if args.path else None[m
[31m-[m
[31m-    requires = [RecipeReference.loads(r) for r in args.requires] \[m
[31m-        if ("requires" in args and args.requires) else None[m
[31m-    tool_requires = [RecipeReference.loads(r) for r in args.tool_requires] \[m
[31m-        if ("tool_requires" in args and args.tool_requires) else None[m
[31m-[m
[31m-    if not path and not requires and not tool_requires:[m
[31m-        raise ConanException("Please specify at least a path to a conanfile or a valid reference.")[m
[31m-[m
[31m-    # Basic collaborators, remotes, lockfile, profiles[m
[31m-    remotes = conan_api.remotes.list(args.remote)[m
[31m-    lockfile = conan_api.lockfile.get_lockfile(lockfile=args.lockfile,[m
[31m-                                               conanfile_path=path,[m
[31m-                                               cwd=cwd,[m
[31m-                                               partial=partial)[m
[31m-    profile_host, profile_build = conan_api.profiles.get_profiles_from_args(args)[m
[31m-[m
[31m-    out = ConanOutput()[m
[31m-    out.title("Input profiles")[m
[31m-    out.info("Profile host:")[m
[31m-    out.info(profile_host.dumps())[m
[31m-    out.info("Profile build:")[m
[31m-    out.info(profile_build.dumps())[m
[31m-[m
[31m-    if path is not None:[m
[31m-        root_node = conan_api.graph.load_root_consumer_conanfile(path, profile_host, profile_build,[m
[31m-                                                                 name=args.name,[m
[31m-                                                                 version=args.version,[m
[31m-                                                                 user=args.user,[m
[31m-                                                                 channel=args.channel,[m
[31m-                                                                 lockfile=lockfile,[m
[31m-                                                                 remotes=remotes,[m
[31m-                                                                 update=args.update)[m
[31m-    else:[m
[31m-        scope_options(profile_host, requires=requires, tool_requires=tool_requires)[m
[31m-        root_node = conan_api.graph.load_root_virtual_conanfile(requires=requires,[m
[31m-                                                                tool_requires=tool_requires,[m
[31m-                                                                profile_host=profile_host)[m
[31m-[m
[31m-    out.title("Computing dependency graph")[m
[31m-    check_updates = args.check_updates if "check_updates" in args else False[m
[31m-    deps_graph = conan_api.graph.load_graph(root_node, profile_host=profile_host,[m
[31m-                                            profile_build=profile_build,[m
[31m-                                            lockfile=lockfile,[m
[31m-                                            remotes=remotes,[m
[31m-                                            update=args.update,[m
[31m-                                            check_update=check_updates)[m
[31m-    print_graph_basic(deps_graph)[m
[31m-    out.title("Computing necessary packages")[m
[31m-    if deps_graph.error:[m
[31m-        if allow_error:[m
[31m-            return deps_graph, lockfile[m
[31m-        raise deps_graph.error[m
[31m-[m
[31m-    conan_api.graph.analyze_binaries(deps_graph, args.build, remotes=remotes, update=args.update,[m
[31m-                                     lockfile=lockfile)[m
[31m-    print_graph_packages(deps_graph)[m
[31m-[m
[31m-    return deps_graph, lockfile[m
[31m-[m
[31m-[m
 @conan_command(group="Consumer", formatters={"json": json_install})[m
 def install(conan_api, parser, *args):[m
     """[m
[36m@@ -116,14 +48,28 @@[m [mdef install(conan_api, parser, *args):[m
         source_folder = os.path.dirname(path)[m
     else:[m
         source_folder = cwd[m
[32m+[m[32m        path = None[m
     if args.output_folder:[m
         output_folder = make_abs_path(args.output_folder, cwd)[m
     else:[m
         output_folder = None[m
 [m
[32m+[m[32m    # Basic collaborators, remotes, lockfile, profiles[m
     remotes = conan_api.remotes.list(args.remote)[m
[31m-[m
[31m-    deps_graph, lockfile = graph_compute(args, conan_api, partial=args.lockfile_partial)[m
[32m+[m[32m    lockfile = conan_api.lockfile.get_lockfile(lockfile=args.lockfile,[m
[32m+[m[32m                                               conanfile_path=path,[m
[32m+[m[32m                                               cwd=cwd,[m
[32m+[m[32m                                               partial=args.lockfile_partial)[m
[32m+[m[32m    profile_host, profile_build = conan_api.profiles.get_profiles_from_args(args)[m
[32m+[m[32m    if path:[m
[32m+[m[32m        deps_graph = conan_api.graph.load_graph_consumer(path, args.name, args.version,[m
[32m+[m[32m                                                         args.user, args.channel,[m
[32m+[m[32m                                                         profile_host, profile_build, lockfile,[m
[32m+[m[32m                                                         remotes, args.build, args.update)[m
[32m+[m[32m    else:[m
[32m+[m[32m        deps_graph = conan_api.graph.load_graph_requires(args.requires, args.tool_requires,[m
[32m+[m[32m                                                         profile_host, profile_build, lockfile,[m
[32m+[m[32m                                                         remotes, args.build, args.update)[m
 [m
     out = ConanOutput()[m
     out.title("Installing packages")[m
[1mdiff --git a/conan/cli/commands/lock.py b/conan/cli/commands/lock.py[m
[1mindex 99ead7741..e34f0361a 100644[m
[1m--- a/conan/cli/commands/lock.py[m
[1m+++ b/conan/cli/commands/lock.py[m
[36m@@ -3,7 +3,6 @@[m [mimport os[m
 from conan.api.output import ConanOutput[m
 from conan.cli.command import conan_command, OnceArgument, conan_subcommand[m
 from conan.cli.commands import make_abs_path[m
[31m-from conan.cli.commands.install import graph_compute[m
 from conan.cli.args import common_graph_args[m
 from conans.errors import ConanException[m
 from conans.model.graph_lock import Lockfile, LOCKFILE[m
[36m@@ -30,12 +29,27 @@[m [mdef lock_create(conan_api, parser, subparser, *args):[m
         raise ConanException("Can't use --name, --version, --user or --channel arguments with "[m
                              "--requires")[m
 [m
[31m-    deps_graph, lockfile = graph_compute(args, conan_api, partial=True)[m
[31m-[m
[31m-    lockfile = conan_api.lockfile.update_lockfile(lockfile, deps_graph, args.lockfile_packages,[m
[32m+[m[32m    cwd = os.getcwd()[m
[32m+[m[32m    path = conan_api.local.get_conanfile_path(args.path, cwd, py=None) if args.path else None[m
[32m+[m[32m    remotes = conan_api.remotes.list(args.remote)[m
[32m+[m[32m    lockfile = conan_api.lockfile.get_lockfile(lockfile=args.lockfile, conanfile_path=path,[m
[32m+[m[32m                                               cwd=cwd, partial=True)[m
[32m+[m[32m    profile_host, profile_build = conan_api.profiles.get_profiles_from_args(args)[m
[32m+[m
[32m+[m[32m    if path:[m
[32m+[m[32m        graph = conan_api.graph.load_graph_consumer(path, args.name, args.version,[m
[32m+[m[32m                                                    args.user, args.channel,[m
[32m+[m[32m                                                    profile_host, profile_build, lockfile,[m
[32m+[m[32m                                                    remotes, args.build, args.update)[m
[32m+[m[32m    else:[m
[32m+[m[32m        graph = conan_api.graph.load_graph_requires(args.requires, args.tool_requires,[m
[32m+[m[32m                                                    profile_host, profile_build, lockfile,[m
[32m+[m[32m                                                    remotes, args.build, args.update)[m
[32m+[m
[32m+[m[32m    lockfile = conan_api.lockfile.update_lockfile(lockfile, graph, args.lockfile_packages,[m
                                                   clean=args.lockfile_clean)[m
[31m-    conanfile_path = os.path.dirname(deps_graph.root.path) \[m
[31m-        if deps_graph.root.path and args.lockfile_out is None else os.getcwd()[m
[32m+[m[32m    conanfile_path = os.path.dirname(graph.root.path) \[m
[32m+[m[32m        if graph.root.path and args.lockfile_out is None else cwd[m
     conan_api.lockfile.save_lockfile(lockfile, args.lockfile_out or "conan.lock", conanfile_path)[m
 [m
 [m
[1mdiff --git a/conans/test/integration/graph/core/graph_manager_base.py b/conans/test/integration/graph/core/graph_manager_base.py[m
[1mindex 45934b3af..37eb5e90a 100644[m
[1m--- a/conans/test/integration/graph/core/graph_manager_base.py[m
[1m+++ b/conans/test/integration/graph/core/graph_manager_base.py[m
[36m@@ -119,8 +119,10 @@[m [mclass GraphManagerTest(unittest.TestCase):[m
 [m
         conan_api = ConanAPI(cache_folder=self.cache_folder)[m
 [m
[31m-        root_node = conan_api.graph.load_root_consumer_conanfile(path, profile_host, profile_build)[m
[31m-        deps_graph = conan_api.graph.load_graph(root_node, profile_host, profile_build)[m
[32m+[m[32m        deps_graph = conan_api.graph.load_graph_consumer(path, name=None, version=None, user=None,[m
[32m+[m[32m                                                         channel=None, profile_host=profile_host,[m
[32m+[m[32m                                                         profile_build=profile_build, lockfile=None,[m
[32m+[m[32m                                                         remotes=None, build=None, update=None)[m
 [m
         if install:[m
             deps_graph.report_graph_error()[m
