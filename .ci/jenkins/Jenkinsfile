import jenkins.model.*

def nightly = (env.JOB_NAME == "ConanNightly")

def slaves = ['Linux', 'Windows', 'Macos']

def pyvers
if (env.BRANCH_NAME =~ /(^release.*)|(^master)/) {
    pyvers = ['py36', 'py34', 'py27']
}
else{
    pyvers = ['py36', 'py27']
}

def api_confs = ["v1", "v2"]


builder = new ConanBuilder("${env.WORKSPACE}", slaves, pyvers, api_confs)
builder.build()


class ConanBuilder{

    List slaves;
    List pyvers;
    List api_confs;
    String workspace_dir;
    String module;
    String numcores;
    String runner;
    String commit;
    String branch;
    String win_tmp_base;
    String rest_tmp_base;

    ConanBuilder(workspace_dir, slaves, pyvers, api_confs){
        this.workspace_dir = workspace_dir
        this.module = "\"conans.test\""
        this.numcores = "--num_cores=3"
        this.slaves = slaves
        this.pyvers = pyvers
        this.api_confs = api_confs
        this.runner = ".ci/jenkins/runner.py"
        this.win_tmp_base = "D:/J/t/"
        this.rest_tmp_base = "/tmp/"

    }

    def build(){
        def builders = [:]
        for (x in slaves) {
            def slave = x
            for (y in pyvers) {
                for (z in api_confs){
                    def pyver = y
                    def api_conf = z
                    def name = "${slave} - ${pyver} - API${api_conf}"
                    builders[name] = {
                        node(slave) {
                            stage(name){
                                this.prepare_source()
                                if(slave == "Linux"){
                                    this.build_linux()
                                }
                                else if(slave == "Windows"){
                                    this.build_windows()
                                }
                                else if(slave == "Macos"){
                                    this.build_mac()
                                }
                            }
                        }
                    }
                }
            }
        }
        parallel builders
    }

    def prepare_source(slave, pyver, api_conf){
        lock('source_code') { // Prepare a clean new directory with the sources
            try{
                step ([$class: 'WsCleanup'])
            }
            catch(e){
                echo "Cannot clean WS"
            }

            def vars = checkout scm
            this.commit = vars["GIT_COMMIT"].substring(0, 4)
            this.branch = vars["GIT_BRANCH"]
            def base_dir = (slave == "Windows") ? win_tmp_base : rest_tmp_base
            def workdir = "${base_dir}${this.commit}/${pyver}/${api_conf}"
            def base_source = "${base_dir}source/${this.commit}"
            def sourcedir = "${base_source}/${pyver}/${api_conf}"
            while(fileExists(sourcedir)){
                sourcedir = sourcedir + "_"
            }

            dir(base_source){ // Trick to create the parent
                def escaped_ws = this.workspace.replace("\\", "/")
                def cmd = "python -c \"import shutil; shutil.copytree('${escaped_ws}', '${sourcedir}')\""
                if (slave == "Windows"){
                    bat(script: cmd)
                }
                else{
                    sh(script: cmd)
                }
            }
        }
    }

    def build_linux(pyver, sourcedir, workdir, api_conf){
        sh "docker pull lasote/conantests"
        docker.image('lasote/conantests').inside("-e CONAN_USER_HOME=${sourcedir} -v${sourcedir}:${sourcedir}") {
            sh(script: "python ${runner} ${module} ${pyver} ${sourcedir} ${workdir} -e rest_api ${numcores}  --server_api=${api_conf}")
        }
    }

    def build_windows(pyver, sourcedir, workdir, api_conf){
        try{
            withEnv(["CONAN_TEST_FOLDER=${workdir}"]){
                bat(script: "python ${runner} ${module} ${pyver} ${sourcedir} \"${workdir}\" -e rest_api -e windows_ci_excluded ${numcores} --server_api=${api_conf}")
            }
        }
        finally{
            bat(script: "rd /s /q \"${workdir}\"")
            bat(script: "rd /s /q \"${sourcedir}\"")
        }
    }

    def build_mac(pyver, sourcedir, workdir, api_conf){
        try{
            withEnv(['PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin']) {
                sh(script: "python ${runner} ${module} ${pyver} ${sourcedir} ${workdir} -e rest_api ${numcores} --server_api=${api_conf}")
            }
        }
        finally{
            sh(script: "rm -rf ${workdir}")
            sh(script: "rm -rf ${sourcedir}")
        }
    }

}

/*
try{
    // Run rest_api_test without concurrency between same node
    pyvers = ['py36']
    for (y in pyvers) {
        builders = [:]
        def pyver = y
        builders["Windows Rest API Test"] = {
            node("Windows"){
                stage("REST tests Windows ${pyver}"){
                    try{
                        bat(script: "python ${runner} conans.test.remote.rest_api_test ${pyver} ${WORKSPACE} \"${win_tmp_base}${commit}\"")
                    }
                    finally{
                        bat(script: "rd /s /q \"${win_tmp_base}${commit}\"")
                    }
                }
            }
        }
        builders["Linux Rest API Test"] = {
            node("Linux"){
                stage("REST tests Linux ${pyver}"){
                    docker.image('lasote/conantests').inside("-e CONAN_USER_HOME=${WORKSPACE}") {
                        sh(script: "python ${runner} conans.test.remote.rest_api_test ${pyver} ${WORKSPACE} /tmp/${commit}")
                    }
                }
            }
        }
        parallel builders
    }
}
catch(e){
    if(nightly){
        def subject = "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
        def summary = "${subject} (${env.BUILD_URL}), Branch: ${branch}"
        slackSend (color: '#FF0000', message: summary)
    }
    throw e
}

if(nightly){
    def subject = "SUCCESS ${env.JOB_NAME}! Another day with a green ${branch}!"
    def summary = "${subject} (${env.BUILD_URL})"
    slackSend (color: '#00FF00', message: summary)
}
*/

