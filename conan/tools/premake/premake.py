from conan.errors import ConanInvalidConfiguration
from conan.tools.microsoft import MSBuild
from conan.tools.apple import XcodeBuild

import os.path

# Dictionary for MSVC version's to year lookups
PREMAKE_VS_VERSION = {
    '140': '2005',
    '150': '2008',
    '160': '2010',
    '170': '2012',
    '180': '2013',
    '190': '2015',
    '191': '2017',
    '192': '2019',
    '193': '2022',
}

class Premake:
    def __init__(self, conanfile):
        self._conanfile = conanfile

        # Accessible members
        self.action = None                  # premake5 action to use (Autogenerated)
        self.luafile = 'premake5.lua'       # Path to the root (premake5) lua file
        self.compiler = None                # Compiler to uses (clang or gcc)
        self.arguments = {}                 # https://premake.github.io/docs/Command-Line-Arguments/
                                            # (As key value pairs. Will translate to "--{key}={value}")
        self.project_name = None            # Name of target project
                                            # On windows you can provide the solution name required for building
                                            # If not provided it will be automatically detected
        self.build_type = None              # Overrides the build configuration supplied by conan
        self.build_targets = []             # Name of projects that should be build (Will build all if empty)

        # We will find the right action depending on OS and Compiler Version
        if self._conanfile.settings.os == 'Windows':
            # Visual studio version detection
            msvc_version = self._get_msvc_version()
            if msvc_version in PREMAKE_VS_VERSION:
                self.action = f'vs{PREMAKE_VS_VERSION[msvc_version]}'
        elif self._conanfile.settings.os == 'Linux':
            self.action = 'gmake2'
            # Detect gcc or clang
            cxx_name = str(self._conanfile.settings.compiler)
            if 'gcc' in cxx_name:
                self.compiler = 'gcc'
            elif 'clang' in cxx_name:
                self.compiler = 'clang'
        elif self._conanfile.settings.os == 'Macos':
            # No detection for OSX required currently
            self.action = 'xcode4'

    def validate(self):
        # Validate visual studio version on windows
        if self._conanfile.settings.os == 'Windows':
            msvc_version = self._get_msvc_version()
            if msvc_version not in PREMAKE_VS_VERSION:
                raise ConanInvalidConfiguration(
                    f'Compiler / VisualStudio version "{msvc_version}" is not supported by premake5'
                    )
            
        # Validate compiler
        if self._conanfile.settings.os != 'Windows' and self._conanfile.settings.os != 'Linux' and self._conanfile.settings.os != 'Macos':
            raise ConanInvalidConfiguration(
                f'The operation system with name {str(self._conanfile.settings.os)} is not supported by premake5'
                )

    def _expand_args(self, args):
        return ' '.join([f'--{key}={value}' for key, value in args.items()])
    
    def _get_msvc_version(self):
        # We want to convert msvc versions like "19.1" and "19.10" to "191"
        # We remove the (all) dots and reduce the the string to 3 digits by striping the last character if too many
        msvc_version = str(self._conanfile.settings.compiler.version)
        msvc_version = msvc_version.replace('.', '')
        if len(msvc_version) == 4:
            msvc_version = msvc_version[0:-1]

        return msvc_version

    def configure(self):
        # Generate options depending on system
        premake_options = dict()
        premake_options["file"] = self.luafile
        if self.compiler:
            premake_options["cc"] = self.compiler

        # Build premake command
        premake_command = f'premake5 {self._expand_args(premake_options)} {self.action} {self._expand_args(self.arguments)}'
        self._conanfile.run(premake_command, cwd=self._conanfile.recipe_folder)

    def build(self):
        if self._conanfile.settings.os == 'Windows' or self._conanfile.settings.os == 'Macos':
            proj_build_provider = None
            proj_file = str(self.project_name)

            # Create os dependant file pattern and build provider
            if self._conanfile.settings.os == 'Windows':
                proj_build_provider = MSBuild(self._conanfile)
                if not proj_file.lower().endswith('.sln'):
                    proj_file = f'{proj_file}.sln'
                if not os.path.isabs(proj_file):
                    proj_file = f'{self._conanfile.recipe_folder}{os.path.sep}{proj_file}'
            elif self._conanfile.settings.os == 'Macos':
                proj_build_provider = XcodeBuild(self._conanfile)

            # Invoke
            if len(self.build_targets) > 0:
                if self._conanfile.settings.os == 'Windows':
                    proj_build_provider.build(proj_file, self.build_targets)
                elif self._conanfile.settings.os == 'Macos':
                    for target in self.build_targets:
                        proj_build_provider(proj_file, target)
            else:
                proj_build_provider.build(proj_file)

        elif self._conanfile.settings.os == 'Linux':
            # Detect build config
            config = self.build_type
            if not config:
                config = self._conanfile.settings.get_safe("build_type")
            
            # Generate and execute the make command
            if len(self.build_targets) > 0:
                for target in self.build_targets:
                    make_command = f'make "config={config}" "{target}"'
                    self._conanfile.run(make_command, cwd=self._conanfile.recipe_folder)
            else:
                make_command = f'make "config={config}" all'
                self._conanfile.run(make_command, cwd=self._conanfile.recipe_folder)
