from conans.client.generators.cmake import DepsCppCmake
from conans.model import Generator

generic_find_package_template = """
message(STATUS "Conan: Using autogenerated Find{name}.cmake")
# Global approach
SET({name}_FOUND 1)
SET({name}_INCLUDE_DIRS {deps.include_paths})
SET({name}_INCLUDES {deps.include_paths})
SET({name}_DEFINITIONS {deps.defines})
SET({name}_LIBRARIES "") # Will be filled later
SET({name}_LIBS "") # Same as {name}_LIBRARIES

# Target approach
if(NOT TARGET {name}::{name})
    add_library({name}::{name} INTERFACE IMPORTED)
    if({name}_INCLUDE_DIRS)
      set_target_properties({name}::{name} PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES "${{{name}_INCLUDE_DIRS}}")
    endif()

    SET({name}_LIBRARY_LIST {deps.libs})
    SET({name}_LIB_DIRS {deps.lib_paths})
    foreach(_LIBRARY_NAME ${{{name}_LIBRARY_LIST}})
        unset(CONAN_FOUND_LIBRARY CACHE)
        find_library(CONAN_FOUND_LIBRARY NAME ${{_LIBRARY_NAME}} PATHS ${{{name}_LIB_DIRS}}
                     NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
        if(CONAN_FOUND_LIBRARY)
            list(APPEND {name}_LIBRARIES ${{CONAN_FOUND_LIBRARY}})
            message(STATUS "Found: ${{CONAN_FOUND_LIBRARY}}")
        else()
            message(STATUS "Library ${{_LIBRARY_NAME}} not found in package, might be system one")
        endif()
    endforeach()
    set_property(TARGET {name}::{name} PROPERTY INTERFACE_LINK_LIBRARIES ${{{name}_LIBRARIES}})
    set_property(TARGET {name}::{name} PROPERTY INTERFACE_COMPILE_DEFINITIONS {deps.defines})
    set({name}_LIBS ${{{name}_LIBRARIES}})


endif()
"""


class CMakeFindPackageGenerator(Generator):

    @property
    def filename(self):
        pass

    @property
    def content(self):
        ret = {}
        print(self.deps_build_info.dependencies)
        for depname, cpp_info in self.deps_build_info.dependencies:
            print("DEP FOR %s" % depname)
            print(cpp_info.public_deps)
            ret["Find%s.cmake" % depname] = self._single_find_package(depname, cpp_info)
        return ret

    @staticmethod
    def _single_find_package(name, cpp_info):
        deps = DepsCppCmake(cpp_info)
        tmp = generic_find_package_template.format(name=name, deps=deps)
        return tmp
