from collections import namedtuple, OrderedDict
from datetime import datetime


class _ExportRecipe(namedtuple("UploadRecipe", "reference, name, version, user, channel, time")):

    def __new__(cls, reference):
        the_time = datetime.utcnow()
        return super(cls, _ExportRecipe).__new__(cls, reference, reference.name, reference.version,
                                                 reference.user, reference.channel, the_time)

    def to_dict(self):
        return {"id": self.reference, "name": self.name, "version": self.version, "user": self.user,
                "channel": self.channel, "time": self.time}


class _ExportPackage(namedtuple("UploadPackage", "package_id, time")):

    def __new__(cls, package_id):
        the_time = datetime.utcnow()
        return super(cls, _ExportPackage).__new__(cls, package_id, the_time)

    def to_dict(self):
        return {"id": self.package_id, "time": self.time}


class ExportRecorder(object):

    def __init__(self):
        self.error = False
        self._info = OrderedDict()

    def add_recipe(self, reference):
        self._info[reference] = {"recipe": _ExportRecipe(reference),
                                 "packages": []}

    def add_package(self, reference, package_id):
        self._info[reference]["packages"].append(_ExportPackage(package_id))

    def get_info(self):
        info = {"error": self.error, "uploaded": []}

        for item in self._info.values():
            recipe_info = item["recipe"].to_dict()
            packages_info = [package.to_dict() for package in item["packages"]]
            info["exported"].append({"recipe": recipe_info, "packages": packages_info})

        return info
